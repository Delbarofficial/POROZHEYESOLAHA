from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from google.generativeai import configure, GenerativeModel
import requests
import nest_asyncio
import asyncio

nest_asyncio.apply()

# ØªÙ†Ø¸ÛŒÙ…Ø§Øª Ø±Ø¨Ø§Øª Ø¨Ù„Ù‡
TELEGRAM_TOKEN = '729864260:v4YYzPGxvatHPCKrnfUr7h4DyDN9ATxgjahyUHxg'
RPI_URL = 'http://Ø¢ÛŒâ€ŒÙ¾ÛŒâ€ŒØ±Ø²Ø¨Ø±ÛŒ:5000/control?device=light&action=on'
GEMINI_API_KEY = 'AIzaSyDGw45ZF4KzfBjRy3Qnp9CVVhKzu25amhg'

# Ù…Ø¯Ù„ Ø²Ø¨Ø§Ù†ÛŒ
configure(api_key=GEMINI_API_KEY)
model = GenerativeModel("gemini-pro")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    if "Ú†Ø±Ø§Øº" in user_text or "Ø±ÙˆØ´Ù†" in user_text:
        try:
            requests.get(RPI_URL)
            await update.message.reply_text("Ú†Ø±Ø§Øº Ø±ÙˆØ´Ù† Ø´Ø¯! ðŸ’¡")
        except Exception as e:
            await update.message.reply_text(f"Ø®Ø·Ø§ Ø¯Ø± Ø§ØªØµØ§Ù„ Ø¨Ù‡ Ø±Ø²Ø¨Ø±ÛŒâ€ŒÙ¾Ø§ÛŒ: {e}")
    else:
        response = model.generate_content(user_text)
        await update.message.reply_text(response.text)

# Ø§Ø¬Ø±Ø§ Ø¨Ø§ URL Ø¨Ù„Ù‡
async def main_async():
    app = ApplicationBuilder().token('729864260:v4YYzPGxvatHPCKrnfUr7h4DyDN9ATxgjahyUHxg').base_url('https://tapi.bale.ai/').build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

await main_async()